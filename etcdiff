#!/bin/bash 
# etcdiff
# Author: Robin Bj√∂rnsvik
# 2015-01-30	
# List the files in /etc which differs between two timeperiods. The files are archived
# with tar.
# Synopsis:
# etcdiff [ earlytimestamp latetimestamp | -c | -l | -h | -r | [ timestamp | ALL ]]
# Time format: YYYYMMDDhhmmss

# Global variables
BIN_DIR=/usr/local/bin				# Directory containing the script
TIMESTAMP_DIR=/usr/local/etc		# Directory containing timestamp archives

# Error codes
E_NOTFOUND=1							# No timestamp was found or not enough
E_SYNTAX=2								# Invalid syntax/format was used.
E_NOTROOT=3								# Attempt to run script as regular user
E_NODIFF=4								# Timestamp files are equal and do not differ

# INSTALL SCRIPT
# Copy script to $BIN_DIR and create directory for timestamps if non-existing.
function install() {
	script=$(basename $0)
	# Copy/Install script if its not in $BIN_DIR
	if ! [ -e ${BIN_DIR}/${script} ]; then
   	cp $0 ${BIN_DIR}/${script}
	fi
	# Create archive directory for timestamps if not existing, $TIMESTAMP_DIR
	if ! [ -e ${TIMESTAMP_DIR} ]; then
	   mkdir -p ${TIMESTAMP_DIR}
	fi

	return 0
}

# USAGE, -h
# Print usage information and syntax information about the script
function usage() {
	echo "Usage: $(basename $0) [TMS1 TMS2] [OPTIONS]"
	echo "  TMS1, TMS2		Compares two timestamps and return difference in the format of YYYYMMDDhhmmss."
	echo "  -c, 			Create timestamp."
	echo "  -l, 			List timestamps."
	echo "  -r [OPT],		Remove timestamp(s).ENTRY=ALL remove all timestamps."	     
	echo "  -h, 		  	Print usage information."	     
}

# CREATE TIMESTAMP, -c
# Called with '-c', finds and saves the state of all files in /etc to a file
# in $TIMESTAMP_DIR. The information  is archived and will be identified with
# a timestamp format; YYYYMMDDhhmmss
function createTimestamp() {
	# Name timestamp with date, YYYYMMDDhhmmss
	local file=$(date '+%Y%m%d%H%M%S')	

	# List all files in /etc and add checksum to every entry, <md5sum> /etc/<file>
	# (Backup) files ending with - or ~ will be ignored with grep
	# Write to tar and save in $TIMESTAMP_DIR
	find /etc -type f | grep -E '[^-~]$' | 
		# Add to tar file and redirect to /dev/null to avoid "Remove trailing /" error
		xargs tar -rf ${TIMESTAMP_DIR}/${file}.tar 2> /dev/null
	exit 0
}

# LIST TIMESTAMP, -l
# List entries located in $TIMESTAMP_DIR
function listTimestamps() {
	# Check if the directory is empty or not
	if [ "$(ls -A ${TIMESTAMP_DIR})" ]; then
		# List timestamps and remove .tar with sed
	  	ls -1 ${TIMESTAMP_DIR} | sed -rn 's/(.*).tar/\1/p'		
	else
		# Error no timestamps found
	  	echo "No timestamps could be found, use -c to create." 1>&2
	  	return $E_NOTFOUND
	fi

	exit 0							
}

# REMOVE TIMESTAMP, -r --remove
# Removes archived timestamp from $TIMESTAMP_DIR. Req parameter.
# If send with ALL as parameter, it will remove all entries in $TIMESTAMP_DIR.
function removeTimestamp() {
	# Get number files currently located in $TIMESTAMP_DIR
	local filecount=$( ls ${TIMESTAMP_DIR} | wc -l)

	# REMOVE ALL 
	# If 'ALL' is passed as argument AND timestamps can be found, remove all timestamps.
	if [[ $1 = "ALL" && $filecount -ge 1 ]]; then			 
		rm ${TIMESTAMP_DIR}/*
	# REMOVE SINGLE
	# Remove if argument match 14 digits AND timestamp exists in $TIMESTAMP_DIR
	elif [[ $1 =~ ^[0-9]{14}$ && -e ${TIMESTAMP_DIR}/${1} ]]; then	
		rm ${TIMESTAMP_DIR}/${1}.tar

	#CATCH ERRORS
	# If 'ALL' was entered but no timestamps to remove
   elif [[ $1 = "ALL" && $filecount -eq 0 ]]; then
	  	echo "No timestamps exists." 1>&2
	  	exit $E_NOTFOUND
   # If format is correct but no matching timestamp file
	elif [[ $1 =~ ^[0-9]{14}$ ]]; then
	   echo "No timestamp exists from that date."
	   "\nRun with -l to list all available timestamps." 1>&2
	   exit $E_NOTFOUND
	# If format is incorrect 
   else
		echo "Invalid syntax. Please check the format: YYYYMMDDhhmmss" 1>&2
	   exit $E_SYNTAX						
	fi

	exit 0
}

# COMPARE FILES
# Run two timestamps with diff and compares checksum.
function compare() {
	# Check that correct format was entered
	# Declare two variables and add .tar to use for comparison
	local file1=${1}.tar
	local file2=${2}.tar
	# Get number files currently located in $TIMESTAMP_DIR
	local filecount=$(ls $TIMESTAMP_DIR | wc -l)
	
	# FIND
	# If no argument was passed, then find the two most recent stamps
	if [ $# -eq 0 ]; then 
		# First check if there are enough created timestamps to make a comparison
		if [ $filecount -ge 2 ]; then
		  file1=$( ls ${TIMESTAMP_DIR} | tail -1 )
		  file2=$( ls ${TIMESTAMP_DIR} | tail -2 | head -1 )
		# Exit if 1 or no timestamps was found.
		else
		  echo "Not enough timestamps exists. Please create some with -c." 1>&2
		  exit $E_NOTFOUND
		fi
	fi
	# FILE CHECK
	# Make sure the two timestamp files are valid and exist before running diff
	# Check that both file1 AND file2 are 14 digits ending with tar. 
   if [[ $file1 =~ ^[0-9]{14}.tar$ && $file2 =~ ^[0-9]{14}.tar$ ]]; then
		 # Error: Exit if files not exist.
		 if ! [[ -e ${TIMESTAMP_DIR}/${file1} && -e ${TIMESTAMP_DIR}/${file2} ]]; then
		    echo "Timestamp not found. Make sure the files exists with -l" 1>&2
		    exit $E_NOTFOUND
		  fi
	# Error: Invalid syntax
   else
		 echo "Invalid syntax. Please check the format on the timestamp: YYYYMMDDhhmmss" 1>&2
		 exit $E_SYNTAX						
	fi
			
	# RUN DIFF
	# List the contents of the tar's by command substitute and run diff between them.
	result=$(diff <( tar -tvf ${TIMESTAMP_DIR}/$file1 ) <( tar -tvf ${TIMESTAMP_DIR}/$file2 ))
	
	# Print helpful message if nothing differs between the files
	if [ -n "$result" ]; then
		for file in $result; do
			# Show only the path and filter out the rest with sed 
			echo $file | sed -rn 's|^.*(etc/.*)$|/\1|p'
		done
	else
		echo "No difference between timestamps." 1>&2
	   exit $E_NODIFF
	fi
	
	exit 0
}

### RUNTIME ###
# Make sure script is run as root to be able to get all files from /etc.
! [ $UID = 0 ] && echo "Needs to be run as root." && exit $E_NOTROOT

# Initiate script install.
install

# CATCH PARAMETERS
# Get parameter with getopts. Note that -r req one argument
# -c, -l, -h, -r.
while getopts ":clhr:" option; do
   case $option in 
    c) createTimestamp;;
    l) listTimestamps;;
    r) removeTimestamp ${OPTARG};;		# -r option needs an argument.
    h) usage;;
    # Print usage, -h, option if the parameter entered is not valid
    *) echo "Invalid option"				
		 echo "-----"
		 usage
		 exit $E_SYNTAX;;
   esac
done

# RUN COMPARE
# Match to see if compare should be called
# Defaults to the two most recent timestamps if no arguments exists
if [ $# -eq 0 ]; then 
   compare
# ONE ARGUMENT
elif [ $# -eq 1 ]; then
	# If only one timestamp was entered, print error.
	if [[ $1 =~ ^[0-9]{14}$ || $2 =~ ^[0-9]{14}$ ]]; then
		echo "Invalid syntax. Only one timestamp was entered. Requires two." 1>&2
		exit $E_SYNTAX
	fi
# TWO ARGUMENTS
elif [ $# -eq 2 ]; then
	# If both args contain 14 digits, do compare
	if [[ $1 =~ ^[0-9]{14}$ && $2 =~ ^[0-9]{14}$ ]]; then
   	compare $1 $2
	else
   	echo "Invalid syntax" 1>&2
		usage
		exit $E_SYNTAX
	fi
# If more then two args or anything else was entered, print syntax error.
else
   	echo "Invalid syntax" 1>&2
		usage
		exit $E_SYNTAX
fi
# Terminate
exit 0
